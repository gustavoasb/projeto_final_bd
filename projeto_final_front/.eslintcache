[{"C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\index.js":"1","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Hospital.js":"2","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Doctor.js":"3","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\SignUp.js":"4","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Home.js":"5","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Admin.js":"6","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\reportWebVitals.js":"7","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Login.js":"8","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\App.js":"9","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\services\\api.js":"10","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Entries.js":"11","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\LoginUser.js":"12","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\LoginDoctor.js":"13"},{"size":500,"mtime":1606757421698,"results":"14","hashOfConfig":"15"},{"size":2364,"mtime":1606765394753,"results":"16","hashOfConfig":"15"},{"size":4179,"mtime":1607028209907,"results":"17","hashOfConfig":"15"},{"size":3342,"mtime":1606764451692,"results":"18","hashOfConfig":"15"},{"size":3816,"mtime":1606968054222,"results":"19","hashOfConfig":"15"},{"size":2388,"mtime":1606765748297,"results":"20","hashOfConfig":"15"},{"size":362,"mtime":1606757421698,"results":"21","hashOfConfig":"15"},{"size":1351,"mtime":1606971366873,"results":"22","hashOfConfig":"15"},{"size":1471,"mtime":1606971075844,"results":"23","hashOfConfig":"15"},{"size":153,"mtime":1606965311103,"results":"24","hashOfConfig":"15"},{"size":4735,"mtime":1607028530650,"results":"25","hashOfConfig":"15"},{"size":1998,"mtime":1606970831733,"results":"26","hashOfConfig":"15"},{"size":2006,"mtime":1606971402129,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"olqc8q",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\index.js",[],["59","60"],"C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Hospital.js",[],"C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Doctor.js",["61"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport api from \"../services/api\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport Notificate from \"@material-ui/icons/NotificationsActive\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n    maxWidth: 1200,\r\n  },\r\n});\r\n\r\nexport default function Doctor() {\r\n  const classes = useStyles();\r\n  const [entries, setEntries] = useState([]);\r\n  const [refresh, setRefresh] = useState(0);\r\n  let leveCounter = 0;\r\n  let graveCounter = 0;\r\n\r\n  const crm = localStorage.getItem(\"doctor-crm\");\r\n\r\n  function isFromUser(value) {\r\n    if (!value.was_attended) {\r\n      if (value.doctor_crm === crm) {\r\n        if (value.health_condition_id === 1) {\r\n          leveCounter += 1;\r\n          value.posicao = leveCounter;\r\n        } else {\r\n          graveCounter += 1;\r\n          value.posicao = graveCounter;\r\n        }\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleNotificate(entry_id) {\r\n    api.post(\"/entry_notification\", { entry_id });\r\n  }\r\n\r\n  function handleConclude(entry_id) {\r\n    let data = {\r\n      entry_id,\r\n      was_attended: true,\r\n    };\r\n    api.put(`entries/${entry_id}`, data).then(() => {\r\n      setRefresh((refresh) => refresh + 1);\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    api.get(\"/entries\").then((res) => {\r\n      setEntries(res.data.filter(isFromUser));\r\n      console.log(entries);\r\n    });\r\n  }, [refresh]);\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\r\n      <div\r\n        style={{\r\n          height: \"100%\",\r\n          flexDirection: \"column\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <div style={{ fontSize: \"1.2rem\", marginBottom: \"0.6rem\" }}>\r\n          Fila de espera\r\n        </div>\r\n        <div>\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>CPF do Usuário</TableCell>\r\n                  <TableCell align=\"right\">Hora de chegada</TableCell>\r\n                  <TableCell align=\"right\">Posição na Fila</TableCell>\r\n                  <TableCell align=\"right\">Fila</TableCell>\r\n                  <TableCell align=\"right\">Ações</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {entries.map((row) => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.user_cpf}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{row.arrival_time}</TableCell>\r\n                    <TableCell align=\"right\">\r\n                      {row.was_attended ? \"\" : row.posicao}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      {row.health_condition_id === 1 ? \"Comum\" : \"Preferencial\"}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      <Button\r\n                        color=\"primary\"\r\n                        onClick={() => handleNotificate(row.id)}\r\n                        startIcon={<Notificate />}\r\n                      />\r\n                      <Button\r\n                        color=\"primary\"\r\n                        onClick={() => handleConclude(row.id)}\r\n                        startIcon={<Check />}\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\SignUp.js",[],"C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Home.js",["62","63","64"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport api from \"../services/api\";\r\nimport ConfirmedIcon from \"@material-ui/icons/AssignmentTurnedIn\";\r\nimport ViewList from \"@material-ui/icons/ViewList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 200,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function Login() {\r\n  const classes = useStyles();\r\n  const [entry, setEntry] = useState({\r\n    user_cpf: \"\",\r\n    doctor_crm: \"\",\r\n    health_condition_id: \"\",\r\n  });\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [health_conditions, setHealthConditions] = useState([]);\r\n  let history = useHistory();\r\n  const name = localStorage.getItem(\"user-name\");\r\n  const cpf = localStorage.getItem(\"user-cpf\");\r\n\r\n  useEffect(() => {\r\n    api.get(\"/doctors\").then((res) => {\r\n      setDoctors(res.data);\r\n    });\r\n    api.get(\"/health_conditions\").then((res) => {\r\n      setHealthConditions(res.data);\r\n    });\r\n    if (cpf) {\r\n      setEntry({ ...entry, user_cpf: cpf });\r\n    }\r\n  }, []);\r\n\r\n  function handleSubmit() {\r\n    api\r\n      .post(\"/entries\", entry)\r\n      .then((res) => {\r\n        alert(\"Entrada registrada com sucesso\");\r\n      })\r\n      .catch((res) => {\r\n        alert(\"Erro na hora de criar a entrada\");\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\r\n      <div\r\n        style={{\r\n          height: \"100%\",\r\n          flexDirection: \"column\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <div style={{ fontSize: \"1.2rem\", marginBottom: \"2rem\" }}>\r\n          Olá {name}, seja bem vindo(a)!\r\n        </div>\r\n        <div style={{ fontSize: \"1.2rem\", marginBottom: \"0.6rem\" }}>\r\n          Dar entrada\r\n        </div>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo-simple-select-label\">Médico</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={entry.doctor_crm}\r\n            onChange={(e) => setEntry({ ...entry, doctor_crm: e.target.value })}\r\n          >\r\n            {doctors.map((item, idx) => (\r\n              <MenuItem value={item.crm}>{item.name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo-simple-select-label\">Estado de Saúde</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={entry.health_condition_id}\r\n            onChange={(e) =>\r\n              setEntry({ ...entry, health_condition_id: e.target.value })\r\n            }\r\n          >\r\n            {health_conditions.map((item, idx) => (\r\n              <MenuItem value={item.id}>{item.name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <Button\r\n          color=\"primary\"\r\n          onClick={() => handleSubmit()}\r\n        >\r\n          Confirmar\r\n        </Button>\r\n        <br />\r\n        <Button\r\n          color=\"primary\"\r\n          onClick={() => history.push(\"/user_entries\")}\r\n          startIcon={<ViewList />}\r\n        >\r\n          Ver entradas\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Admin.js",["65","66","67","68"],"C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\reportWebVitals.js",[],"C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Login.js",["69","70","71"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from 'react-router-dom';\r\nimport LocalHospital from '@material-ui/icons/LocalHospital';\r\nimport Face from '@material-ui/icons/Face';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: \"25ch\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\"\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Login() {\r\n  const classes = useStyles();\r\n  let history = useHistory()\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\r\n      <div\r\n        style={{\r\n          height: \"100%\",\r\n          flexDirection: \"column\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <div style={{ fontSize: \"1.2rem\", marginBottom: \"0.6rem\" }}>\r\n          Faça login\r\n        </div>\r\n          <Button color=\"primary\" onClick={() => history.push('/login_doctor')} startIcon={<LocalHospital />}>Logar como médico</Button>\r\n          <Button color=\"primary\" onClick={() => history.push('/login_user')} startIcon={<Face />}>Logar como usuário</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\App.js",[],"C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\services\\api.js",["72"],"C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\Entries.js",["73"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport api from \"../services/api\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 650,\r\n    maxWidth: 1200,\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 200,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function Entries() {\r\n  const classes = useStyles();\r\n  const [entries, setEntries] = useState([]);\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [selectedDoctor, setSelectedDoctor] = useState(\"\");\r\n  let leveCounter = 0;\r\n  let graveCounter = 0;\r\n\r\n  const cpf = localStorage.getItem(\"user-cpf\");\r\n\r\n  function isFromUser(value) {\r\n    if(selectedDoctor === value.doctor_crm){\r\n      if (!value.was_attended) {\r\n        if (value.health_condition_id === 1) {\r\n          leveCounter += 1;\r\n          value.posicao = leveCounter;\r\n        } else {\r\n          graveCounter += 1;\r\n          value.posicao = graveCounter;\r\n        }\r\n      }\r\n      if (value.user_cpf.replace(/[^\\w\\s]/gi, \"\") === cpf) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    api.get(\"/doctors\").then((res) => {\r\n      setDoctors(res.data);\r\n    });\r\n  }, []);\r\n\r\n  function getEntries() {\r\n    api.get(\"/entries\").then((res) => {\r\n      setEntries(res.data.filter(isFromUser));\r\n    });\r\n  }\r\n\r\n  function handleChange(e) {\r\n    setSelectedDoctor(e.target.value);\r\n    getEntries();\r\n  }\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\r\n      <div\r\n        style={{\r\n          height: \"100%\",\r\n          flexDirection: \"column\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <div style={{ fontSize: \"1.2rem\", marginBottom: \"0.6rem\" }}>\r\n          Entradas cadastradas\r\n        </div>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo-simple-select-label\">Médico</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={selectedDoctor}\r\n            onChange={(e) => handleChange(e)}\r\n          >\r\n            {doctors.map((item, idx) => (\r\n              <MenuItem value={item.crm}>{item.name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <div>\r\n          {selectedDoctor && (\r\n            <TableContainer component={Paper}>\r\n              <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>CRM do Doutor</TableCell>\r\n                    <TableCell align=\"right\">Hora de chegada</TableCell>\r\n                    <TableCell align=\"right\">Posição na Fila</TableCell>\r\n                    <TableCell align=\"right\">Fila</TableCell>\r\n                    <TableCell align=\"right\">Atendido</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {entries.map((row) => (\r\n                    <TableRow key={row.id}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {row.doctor_crm}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{row.arrival_time}</TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {row.was_attended ? \"\" : row.posicao}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {row.health_condition_id === 1\r\n                          ? \"Comum\"\r\n                          : \"Preferencial\"}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">\r\n                        {row.was_attended ? \"Sim\" : \"Não\"}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\LoginUser.js",[],"C:\\Users\\GUSTAVO\\Documents\\projeto_final_bd\\projeto_final_front\\src\\pages\\LoginDoctor.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":65,"column":6,"nodeType":"80","endLine":65,"endColumn":15,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":7,"column":8,"nodeType":"84","messageId":"85","endLine":7,"endColumn":22},{"ruleId":"82","severity":1,"message":"86","line":11,"column":8,"nodeType":"84","messageId":"85","endLine":11,"endColumn":21},{"ruleId":"78","severity":1,"message":"87","line":47,"column":6,"nodeType":"80","endLine":47,"endColumn":8,"suggestions":"88"},{"ruleId":"82","severity":1,"message":"89","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":17},{"ruleId":"82","severity":1,"message":"90","line":24,"column":9,"nodeType":"84","messageId":"85","endLine":24,"endColumn":16},{"ruleId":"82","severity":1,"message":"91","line":25,"column":16,"nodeType":"84","messageId":"85","endLine":25,"endColumn":23},{"ruleId":"82","severity":1,"message":"92","line":35,"column":12,"nodeType":"84","messageId":"85","endLine":35,"endColumn":24},{"ruleId":"82","severity":1,"message":"93","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"89","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":17},{"ruleId":"82","severity":1,"message":"90","line":21,"column":9,"nodeType":"84","messageId":"85","endLine":21,"endColumn":16},{"ruleId":"82","severity":1,"message":"94","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":13},{"ruleId":"82","severity":1,"message":"83","line":12,"column":8,"nodeType":"84","messageId":"85","endLine":12,"endColumn":22},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'entries' and 'isFromUser'. Either include them or remove the dependency array.","ArrayExpression",["97"],"no-unused-vars","'FormHelperText' is defined but never used.","Identifier","unusedVar","'ConfirmedIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'cpf' and 'entry'. Either include them or remove the dependency array. You can also do a functional update 'setEntry(e => ...)' if you only need 'entry' in the 'setEntry' call.",["98"],"'TextField' is defined but never used.","'classes' is assigned a value but never used.","'setUser' is assigned a value but never used.","'handleSubmit' is defined but never used.","'useState' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [entries, isFromUser, refresh]",{"range":"103","text":"104"},"Update the dependencies array to be: [cpf, entry]",{"range":"105","text":"106"},[1885,1894],"[entries, isFromUser, refresh]",[1529,1531],"[cpf, entry]"]